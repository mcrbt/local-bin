#!/bin/bash
##
## pw - generate passwords of configurable lengths using secpwgen
## Copyright (C) 2020 Daniel Haase
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/gpl.txt>.
##

## script constants
TITLE="pw"
VERSION="0.1.0"

## default parameters
RAW=0
UNITS="23"

## check for command "$1" to be installed
function checkcmd
{
	local c="$1"
	if [ $# -eq 0 ] || [ -z "$c" ]; then return 0; fi
	which "$c" &> /dev/null
	if [ $? -eq 0 ]; then return 0
	else echo "command \"$c\" not found"; exit 1; fi
}

## print version and copyright notice
function version
{
	echo "$TITLE version $VERSION"
	echo "copyright (c) 2020 Daniel Haase"
}

## print usage information
function usage
{
	version
	echo ""
	echo "usage:  $TITLE [-r <n> | <n>]"
	echo "        $TITLE [-V | -h]"
	echo ""
	echo "  <n>"
	echo "    generate a password with <n> characters"
	echo "    (default is ${UNITS})"
	echo ""
	echo "  -r <n> | --raw <n>"
	echo "    BASE64 encode <n> randomly generated bytes"
	echo "    ((<n> * 8) bits)"
	echo ""
	echo "  -V | --version"
	echo "    print version information and exit"
	echo ""
	echo "  -h | --help"
	echo "    print this usage description and exit"
	echo ""
}

## parse command line arguments
function parse
{
	if [ $# -eq 0 ]; then return
	elif [ $# -eq 1 ]; then
		if [ "$1" == "-V" ] || [ "$1" == "--version" ]
		then version; exit 0
		elif [ "$1" == "-h" ] || [ "$1" == "--help" ]
		then usage; exit 0
		elif [[ "$1" == "-"* ]]; then usage; exit 2
		else RAW=0; UNITS="$1"; fi
	elif [ $# -eq 2 ]; then
		if [ "$1" == "-r" ] || [ "$1" == "--raw" ]
		then RAW=1; UNITS="$2"
		else usage; exit 2; fi
	else usage; exit 2; fi
}

## check dependencies
checkcmd "awk"
checkcmd "head"
checkcmd "secpwgen"
checkcmd "tail"

## parse command line arguments
parse "$@"

## set parameters for call to "secpwgen"
if [ $RAW -eq 0 ]; then MODE="-Aads"
else MODE="-r"; UNITS=$((UNITS * 8)); fi

## check for valid parameters (redundant/deprecated)
if [ -z "$MODE" ] || [ -z "$UNITS" ]
then echo "invalid parameters"; exit 3; fi

## invoke "secpwgen", and extract and print result
secpwgen $MODE $UNITS 2> /dev/null | head -n 2 | tail -n 1 | awk '{print $1}'

## exit successfully
exit 0
